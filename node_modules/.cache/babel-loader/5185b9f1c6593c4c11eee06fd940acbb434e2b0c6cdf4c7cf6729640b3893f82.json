{"ast":null,"code":"import _defineProperty from \"/home/prakash/Desktop/Code/Reactjs/Power_Zone_gym/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _slicedToArray from \"/home/prakash/Desktop/Code/Reactjs/Power_Zone_gym/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@mui/utils\";\nvar _excluded = [\"colorSchemes\", \"components\", \"cssVarPrefix\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { deepmerge } from '@mui/utils';\nimport { GlobalStyles } from '@mui/styled-engine';\nimport { useTheme as muiUseTheme } from '@mui/private-theming';\nimport cssVarsParser from './cssVarsParser';\nimport ThemeProvider from '../ThemeProvider';\nimport systemGetInitColorSchemeScript, { DEFAULT_ATTRIBUTE, DEFAULT_COLOR_SCHEME_STORAGE_KEY, DEFAULT_MODE_STORAGE_KEY } from './getInitColorSchemeScript';\nimport useCurrentColorScheme from './useCurrentColorScheme';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport var DISABLE_CSS_TRANSITION = '*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}';\nexport default function createCssVarsProvider(options) {\n  var _options$theme = options.theme,\n    defaultTheme = _options$theme === void 0 ? {} : _options$theme,\n    _options$attribute = options.attribute,\n    defaultAttribute = _options$attribute === void 0 ? DEFAULT_ATTRIBUTE : _options$attribute,\n    _options$modeStorageK = options.modeStorageKey,\n    defaultModeStorageKey = _options$modeStorageK === void 0 ? DEFAULT_MODE_STORAGE_KEY : _options$modeStorageK,\n    _options$colorSchemeS = options.colorSchemeStorageKey,\n    defaultColorSchemeStorageKey = _options$colorSchemeS === void 0 ? DEFAULT_COLOR_SCHEME_STORAGE_KEY : _options$colorSchemeS,\n    _options$defaultMode = options.defaultMode,\n    designSystemMode = _options$defaultMode === void 0 ? 'light' : _options$defaultMode,\n    designSystemColorScheme = options.defaultColorScheme,\n    _options$disableTrans = options.disableTransitionOnChange,\n    designSystemTransitionOnChange = _options$disableTrans === void 0 ? false : _options$disableTrans,\n    designSystemShouldSkipGeneratingVar = options.shouldSkipGeneratingVar,\n    resolveTheme = options.resolveTheme,\n    excludeVariablesFromRoot = options.excludeVariablesFromRoot;\n  if (!defaultTheme.colorSchemes || typeof designSystemColorScheme === 'string' && !defaultTheme.colorSchemes[designSystemColorScheme] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.light] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.dark]) {\n    console.error(\"MUI: `\".concat(designSystemColorScheme, \"` does not exist in `theme.colorSchemes`.\"));\n  }\n  var ColorSchemeContext = /*#__PURE__*/React.createContext(undefined);\n  var useColorScheme = function useColorScheme() {\n    var value = React.useContext(ColorSchemeContext);\n    if (!value) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? \"MUI: `useColorScheme` must be called under <CssVarsProvider />\" : _formatMuiErrorMessage(19));\n    }\n    return value;\n  };\n  function CssVarsProvider(_ref) {\n    var children = _ref.children,\n      _ref$theme = _ref.theme,\n      themeProp = _ref$theme === void 0 ? defaultTheme : _ref$theme,\n      _ref$modeStorageKey = _ref.modeStorageKey,\n      modeStorageKey = _ref$modeStorageKey === void 0 ? defaultModeStorageKey : _ref$modeStorageKey,\n      _ref$colorSchemeStora = _ref.colorSchemeStorageKey,\n      colorSchemeStorageKey = _ref$colorSchemeStora === void 0 ? defaultColorSchemeStorageKey : _ref$colorSchemeStora,\n      _ref$attribute = _ref.attribute,\n      attribute = _ref$attribute === void 0 ? defaultAttribute : _ref$attribute,\n      _ref$defaultMode = _ref.defaultMode,\n      defaultMode = _ref$defaultMode === void 0 ? designSystemMode : _ref$defaultMode,\n      _ref$defaultColorSche = _ref.defaultColorScheme,\n      defaultColorScheme = _ref$defaultColorSche === void 0 ? designSystemColorScheme : _ref$defaultColorSche,\n      _ref$disableTransitio = _ref.disableTransitionOnChange,\n      disableTransitionOnChange = _ref$disableTransitio === void 0 ? designSystemTransitionOnChange : _ref$disableTransitio,\n      _ref$storageWindow = _ref.storageWindow,\n      storageWindow = _ref$storageWindow === void 0 ? typeof window === 'undefined' ? undefined : window : _ref$storageWindow,\n      _ref$documentNode = _ref.documentNode,\n      documentNode = _ref$documentNode === void 0 ? typeof document === 'undefined' ? undefined : document : _ref$documentNode,\n      _ref$colorSchemeNode = _ref.colorSchemeNode,\n      colorSchemeNode = _ref$colorSchemeNode === void 0 ? typeof document === 'undefined' ? undefined : document.documentElement : _ref$colorSchemeNode,\n      _ref$colorSchemeSelec = _ref.colorSchemeSelector,\n      colorSchemeSelector = _ref$colorSchemeSelec === void 0 ? ':root' : _ref$colorSchemeSelec,\n      _ref$shouldSkipGenera = _ref.shouldSkipGeneratingVar,\n      shouldSkipGeneratingVar = _ref$shouldSkipGenera === void 0 ? designSystemShouldSkipGeneratingVar : _ref$shouldSkipGenera,\n      _ref$disableNestedCon = _ref.disableNestedContext,\n      disableNestedContext = _ref$disableNestedCon === void 0 ? false : _ref$disableNestedCon,\n      _ref$disableStyleShee = _ref.disableStyleSheetGeneration,\n      disableStyleSheetGeneration = _ref$disableStyleShee === void 0 ? false : _ref$disableStyleShee;\n    var hasMounted = React.useRef(false);\n    var upperTheme = muiUseTheme();\n    var ctx = React.useContext(ColorSchemeContext);\n    var nested = !!ctx && !disableNestedContext;\n    var _themeProp$colorSchem = themeProp.colorSchemes,\n      colorSchemes = _themeProp$colorSchem === void 0 ? {} : _themeProp$colorSchem,\n      _themeProp$components = themeProp.components,\n      components = _themeProp$components === void 0 ? {} : _themeProp$components,\n      cssVarPrefix = themeProp.cssVarPrefix,\n      restThemeProp = _objectWithoutPropertiesLoose(themeProp, _excluded);\n    var allColorSchemes = Object.keys(colorSchemes);\n    var defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\n    var defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark;\n\n    // 1. Get the data about the `mode`, `colorScheme`, and setter functions.\n    var _useCurrentColorSchem = useCurrentColorScheme({\n        supportedColorSchemes: allColorSchemes,\n        defaultLightColorScheme: defaultLightColorScheme,\n        defaultDarkColorScheme: defaultDarkColorScheme,\n        modeStorageKey: modeStorageKey,\n        colorSchemeStorageKey: colorSchemeStorageKey,\n        defaultMode: defaultMode,\n        storageWindow: storageWindow\n      }),\n      stateMode = _useCurrentColorSchem.mode,\n      setMode = _useCurrentColorSchem.setMode,\n      systemMode = _useCurrentColorSchem.systemMode,\n      lightColorScheme = _useCurrentColorSchem.lightColorScheme,\n      darkColorScheme = _useCurrentColorSchem.darkColorScheme,\n      stateColorScheme = _useCurrentColorSchem.colorScheme,\n      setColorScheme = _useCurrentColorSchem.setColorScheme;\n    var mode = stateMode;\n    var colorScheme = stateColorScheme;\n    if (nested) {\n      mode = ctx.mode;\n      colorScheme = ctx.colorScheme;\n    }\n    var calculatedMode = function () {\n      if (!mode) {\n        // This scope occurs on the server\n        if (defaultMode === 'system') {\n          return designSystemMode;\n        }\n        return defaultMode;\n      }\n      return mode;\n    }();\n    var calculatedColorScheme = function () {\n      if (!colorScheme) {\n        // This scope occurs on the server\n        if (calculatedMode === 'dark') {\n          return defaultDarkColorScheme;\n        }\n        // use light color scheme, if default mode is 'light' | 'system'\n        return defaultLightColorScheme;\n      }\n      return colorScheme;\n    }();\n\n    // 2. Create CSS variables and store them in objects (to be generated in stylesheets in the final step)\n    var _cssVarsParser = cssVarsParser(restThemeProp, {\n        prefix: cssVarPrefix,\n        shouldSkipGeneratingVar: shouldSkipGeneratingVar\n      }),\n      rootCss = _cssVarsParser.css,\n      rootVars = _cssVarsParser.vars;\n\n    // 3. Start composing the theme object\n    var theme = _extends({}, restThemeProp, {\n      components: components,\n      colorSchemes: colorSchemes,\n      cssVarPrefix: cssVarPrefix,\n      vars: rootVars,\n      getColorSchemeSelector: function getColorSchemeSelector(targetColorScheme) {\n        return \"[\".concat(attribute, \"=\\\"\").concat(targetColorScheme, \"\\\"] &\");\n      }\n    });\n\n    // 4. Create color CSS variables and store them in objects (to be generated in stylesheets in the final step)\n    //    The default color scheme stylesheet is constructed to have the least CSS specificity.\n    //    The other color schemes uses selector, default as data attribute, to increase the CSS specificity so that they can override the default color scheme stylesheet.\n    var defaultColorSchemeStyleSheet = {};\n    var otherColorSchemesStyleSheet = {};\n    Object.entries(colorSchemes).forEach(function (_ref2) {\n      var _ref3 = _slicedToArray(_ref2, 2),\n        key = _ref3[0],\n        scheme = _ref3[1];\n      var _cssVarsParser2 = cssVarsParser(scheme, {\n          prefix: cssVarPrefix,\n          shouldSkipGeneratingVar: shouldSkipGeneratingVar\n        }),\n        css = _cssVarsParser2.css,\n        vars = _cssVarsParser2.vars;\n      theme.vars = deepmerge(theme.vars, vars);\n      if (key === calculatedColorScheme) {\n        // 4.1 Merge the selected color scheme to the theme\n        Object.keys(scheme).forEach(function (schemeKey) {\n          if (scheme[schemeKey] && typeof scheme[schemeKey] === 'object') {\n            // shallow merge the 1st level structure of the theme.\n            theme[schemeKey] = _extends({}, theme[schemeKey], scheme[schemeKey]);\n          } else {\n            theme[schemeKey] = scheme[schemeKey];\n          }\n        });\n        if (theme.palette) {\n          theme.palette.colorScheme = key;\n        }\n      }\n      var resolvedDefaultColorScheme = function () {\n        if (typeof defaultColorScheme === 'string') {\n          return defaultColorScheme;\n        }\n        if (defaultMode === 'dark') {\n          return defaultColorScheme.dark;\n        }\n        return defaultColorScheme.light;\n      }();\n      if (key === resolvedDefaultColorScheme) {\n        if (excludeVariablesFromRoot) {\n          var excludedVariables = {};\n          excludeVariablesFromRoot(cssVarPrefix).forEach(function (cssVar) {\n            excludedVariables[cssVar] = css[cssVar];\n            delete css[cssVar];\n          });\n          defaultColorSchemeStyleSheet[\"[\".concat(attribute, \"=\\\"\").concat(key, \"\\\"]\")] = excludedVariables;\n        }\n        defaultColorSchemeStyleSheet[\"\".concat(colorSchemeSelector, \", [\").concat(attribute, \"=\\\"\").concat(key, \"\\\"]\")] = css;\n      } else {\n        otherColorSchemesStyleSheet[\"\".concat(colorSchemeSelector === ':root' ? '' : colorSchemeSelector, \"[\").concat(attribute, \"=\\\"\").concat(key, \"\\\"]\")] = css;\n      }\n    });\n\n    // 5. Declaring effects\n    // 5.1 Updates the selector value to use the current color scheme which tells CSS to use the proper stylesheet.\n    React.useEffect(function () {\n      if (colorScheme && colorSchemeNode) {\n        // attaches attribute to <html> because the css variables are attached to :root (html)\n        colorSchemeNode.setAttribute(attribute, colorScheme);\n      }\n    }, [colorScheme, attribute, colorSchemeNode]);\n\n    // 5.2 Remove the CSS transition when color scheme changes to create instant experience.\n    // credit: https://github.com/pacocoursey/next-themes/blob/b5c2bad50de2d61ad7b52a9c5cdc801a78507d7a/index.tsx#L313\n    React.useEffect(function () {\n      var timer;\n      if (disableTransitionOnChange && hasMounted.current && documentNode) {\n        var css = documentNode.createElement('style');\n        css.appendChild(documentNode.createTextNode(DISABLE_CSS_TRANSITION));\n        documentNode.head.appendChild(css);\n\n        // Force browser repaint\n        (function () {\n          return window.getComputedStyle(documentNode.body);\n        })();\n        timer = setTimeout(function () {\n          documentNode.head.removeChild(css);\n        }, 1);\n      }\n      return function () {\n        clearTimeout(timer);\n      };\n    }, [colorScheme, disableTransitionOnChange, documentNode]);\n    React.useEffect(function () {\n      hasMounted.current = true;\n      return function () {\n        hasMounted.current = false;\n      };\n    }, []);\n    var contextValue = React.useMemo(function () {\n      return {\n        mode: mode,\n        systemMode: systemMode,\n        setMode: setMode,\n        lightColorScheme: lightColorScheme,\n        darkColorScheme: darkColorScheme,\n        colorScheme: colorScheme,\n        setColorScheme: setColorScheme,\n        allColorSchemes: allColorSchemes\n      };\n    }, [allColorSchemes, colorScheme, darkColorScheme, lightColorScheme, mode, setColorScheme, setMode, systemMode]);\n    var shouldGenerateStyleSheet = true;\n    if (disableStyleSheetGeneration || nested && (upperTheme == null ? void 0 : upperTheme.cssVarPrefix) === cssVarPrefix) {\n      shouldGenerateStyleSheet = false;\n    }\n    var element = /*#__PURE__*/_jsxs(React.Fragment, {\n      children: [shouldGenerateStyleSheet && /*#__PURE__*/_jsxs(React.Fragment, {\n        children: [/*#__PURE__*/_jsx(GlobalStyles, {\n          styles: _defineProperty({}, colorSchemeSelector, rootCss)\n        }), /*#__PURE__*/_jsx(GlobalStyles, {\n          styles: defaultColorSchemeStyleSheet\n        }), /*#__PURE__*/_jsx(GlobalStyles, {\n          styles: otherColorSchemesStyleSheet\n        })]\n      }), /*#__PURE__*/_jsx(ThemeProvider, {\n        theme: resolveTheme ? resolveTheme(theme) : theme,\n        children: children\n      })]\n    });\n    if (nested) {\n      return element;\n    }\n    return /*#__PURE__*/_jsx(ColorSchemeContext.Provider, {\n      value: contextValue,\n      children: element\n    });\n  }\n  process.env.NODE_ENV !== \"production\" ? CssVarsProvider.propTypes = {\n    /**\n     * The body attribute name to attach colorScheme.\n     */\n    attribute: PropTypes.string,\n    /**\n     * The component tree.\n     */\n    children: PropTypes.node,\n    /**\n     * The node used to attach the color-scheme attribute\n     */\n    colorSchemeNode: PropTypes.any,\n    /**\n     * The CSS selector for attaching the generated custom properties\n     */\n    colorSchemeSelector: PropTypes.string,\n    /**\n     * localStorage key used to store `colorScheme`\n     */\n    colorSchemeStorageKey: PropTypes.string,\n    /**\n     * The initial color scheme used.\n     */\n    defaultColorScheme: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n    /**\n     * The initial mode used.\n     */\n    defaultMode: PropTypes.string,\n    /**\n     * If `true`, the provider creates its own context and generate stylesheet as if it is a root `CssVarsProvider`.\n     */\n    disableNestedContext: PropTypes.bool,\n    /**\n     * If `true`, the style sheet won't be generated.\n     *\n     * This is useful for controlling nested CssVarsProvider behavior.\n     */\n    disableStyleSheetGeneration: PropTypes.bool,\n    /**\n     * Disable CSS transitions when switching between modes or color schemes\n     */\n    disableTransitionOnChange: PropTypes.bool,\n    /**\n     * The document to attach the attribute to\n     */\n    documentNode: PropTypes.any,\n    /**\n     * The key in the local storage used to store current color scheme.\n     */\n    modeStorageKey: PropTypes.string,\n    /**\n     * A function to determine if the key, value should be attached as CSS Variable\n     */\n    shouldSkipGeneratingVar: PropTypes.func,\n    /**\n     * The window that attaches the 'storage' event listener\n     * @default window\n     */\n    storageWindow: PropTypes.any,\n    /**\n     * The calculated theme object that will be passed through context.\n     */\n    theme: PropTypes.object\n  } : void 0;\n  var defaultLightColorScheme = typeof designSystemColorScheme === 'string' ? designSystemColorScheme : designSystemColorScheme.light;\n  var defaultDarkColorScheme = typeof designSystemColorScheme === 'string' ? designSystemColorScheme : designSystemColorScheme.dark;\n  var getInitColorSchemeScript = function getInitColorSchemeScript(params) {\n    return systemGetInitColorSchemeScript(_extends({\n      attribute: defaultAttribute,\n      colorSchemeStorageKey: defaultColorSchemeStorageKey,\n      defaultMode: designSystemMode,\n      defaultLightColorScheme: defaultLightColorScheme,\n      defaultDarkColorScheme: defaultDarkColorScheme,\n      modeStorageKey: defaultModeStorageKey\n    }, params));\n  };\n  return {\n    CssVarsProvider: CssVarsProvider,\n    useColorScheme: useColorScheme,\n    getInitColorSchemeScript: getInitColorSchemeScript\n  };\n}","map":{"version":3,"names":["_extends","_objectWithoutPropertiesLoose","formatMuiErrorMessage","_formatMuiErrorMessage","_excluded","React","PropTypes","deepmerge","GlobalStyles","useTheme","muiUseTheme","cssVarsParser","ThemeProvider","systemGetInitColorSchemeScript","DEFAULT_ATTRIBUTE","DEFAULT_COLOR_SCHEME_STORAGE_KEY","DEFAULT_MODE_STORAGE_KEY","useCurrentColorScheme","jsx","_jsx","jsxs","_jsxs","DISABLE_CSS_TRANSITION","createCssVarsProvider","options","theme","defaultTheme","attribute","defaultAttribute","modeStorageKey","defaultModeStorageKey","colorSchemeStorageKey","defaultColorSchemeStorageKey","defaultMode","designSystemMode","designSystemColorScheme","defaultColorScheme","disableTransitionOnChange","designSystemTransitionOnChange","designSystemShouldSkipGeneratingVar","shouldSkipGeneratingVar","resolveTheme","excludeVariablesFromRoot","colorSchemes","light","dark","console","error","ColorSchemeContext","createContext","undefined","useColorScheme","value","useContext","Error","process","env","NODE_ENV","CssVarsProvider","children","themeProp","storageWindow","window","documentNode","document","colorSchemeNode","documentElement","colorSchemeSelector","disableNestedContext","disableStyleSheetGeneration","hasMounted","useRef","upperTheme","ctx","nested","components","cssVarPrefix","restThemeProp","allColorSchemes","Object","keys","defaultLightColorScheme","defaultDarkColorScheme","supportedColorSchemes","stateMode","mode","setMode","systemMode","lightColorScheme","darkColorScheme","stateColorScheme","colorScheme","setColorScheme","calculatedMode","calculatedColorScheme","prefix","rootCss","css","rootVars","vars","getColorSchemeSelector","targetColorScheme","defaultColorSchemeStyleSheet","otherColorSchemesStyleSheet","entries","forEach","key","scheme","schemeKey","palette","resolvedDefaultColorScheme","excludedVariables","cssVar","useEffect","setAttribute","timer","current","createElement","appendChild","createTextNode","head","getComputedStyle","body","setTimeout","removeChild","clearTimeout","contextValue","useMemo","shouldGenerateStyleSheet","element","Fragment","styles","Provider","propTypes","string","node","any","oneOfType","object","bool","func","getInitColorSchemeScript","params"],"sources":["/home/prakash/Desktop/Code/Reactjs/Power_Zone_gym/node_modules/@mui/system/esm/cssVars/createCssVarsProvider.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@mui/utils\";\nconst _excluded = [\"colorSchemes\", \"components\", \"cssVarPrefix\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { deepmerge } from '@mui/utils';\nimport { GlobalStyles } from '@mui/styled-engine';\nimport { useTheme as muiUseTheme } from '@mui/private-theming';\nimport cssVarsParser from './cssVarsParser';\nimport ThemeProvider from '../ThemeProvider';\nimport systemGetInitColorSchemeScript, { DEFAULT_ATTRIBUTE, DEFAULT_COLOR_SCHEME_STORAGE_KEY, DEFAULT_MODE_STORAGE_KEY } from './getInitColorSchemeScript';\nimport useCurrentColorScheme from './useCurrentColorScheme';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const DISABLE_CSS_TRANSITION = '*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}';\nexport default function createCssVarsProvider(options) {\n  const {\n    theme: defaultTheme = {},\n    attribute: defaultAttribute = DEFAULT_ATTRIBUTE,\n    modeStorageKey: defaultModeStorageKey = DEFAULT_MODE_STORAGE_KEY,\n    colorSchemeStorageKey: defaultColorSchemeStorageKey = DEFAULT_COLOR_SCHEME_STORAGE_KEY,\n    defaultMode: designSystemMode = 'light',\n    defaultColorScheme: designSystemColorScheme,\n    disableTransitionOnChange: designSystemTransitionOnChange = false,\n    shouldSkipGeneratingVar: designSystemShouldSkipGeneratingVar,\n    resolveTheme,\n    excludeVariablesFromRoot\n  } = options;\n  if (!defaultTheme.colorSchemes || typeof designSystemColorScheme === 'string' && !defaultTheme.colorSchemes[designSystemColorScheme] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.light] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.dark]) {\n    console.error(`MUI: \\`${designSystemColorScheme}\\` does not exist in \\`theme.colorSchemes\\`.`);\n  }\n  const ColorSchemeContext = /*#__PURE__*/React.createContext(undefined);\n  const useColorScheme = () => {\n    const value = React.useContext(ColorSchemeContext);\n    if (!value) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: \\`useColorScheme\\` must be called under <CssVarsProvider />` : _formatMuiErrorMessage(19));\n    }\n    return value;\n  };\n  function CssVarsProvider({\n    children,\n    theme: themeProp = defaultTheme,\n    modeStorageKey = defaultModeStorageKey,\n    colorSchemeStorageKey = defaultColorSchemeStorageKey,\n    attribute = defaultAttribute,\n    defaultMode = designSystemMode,\n    defaultColorScheme = designSystemColorScheme,\n    disableTransitionOnChange = designSystemTransitionOnChange,\n    storageWindow = typeof window === 'undefined' ? undefined : window,\n    documentNode = typeof document === 'undefined' ? undefined : document,\n    colorSchemeNode = typeof document === 'undefined' ? undefined : document.documentElement,\n    colorSchemeSelector = ':root',\n    shouldSkipGeneratingVar = designSystemShouldSkipGeneratingVar,\n    disableNestedContext = false,\n    disableStyleSheetGeneration = false\n  }) {\n    const hasMounted = React.useRef(false);\n    const upperTheme = muiUseTheme();\n    const ctx = React.useContext(ColorSchemeContext);\n    const nested = !!ctx && !disableNestedContext;\n    const {\n        colorSchemes = {},\n        components = {},\n        cssVarPrefix\n      } = themeProp,\n      restThemeProp = _objectWithoutPropertiesLoose(themeProp, _excluded);\n    const allColorSchemes = Object.keys(colorSchemes);\n    const defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\n    const defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark;\n\n    // 1. Get the data about the `mode`, `colorScheme`, and setter functions.\n    const {\n      mode: stateMode,\n      setMode,\n      systemMode,\n      lightColorScheme,\n      darkColorScheme,\n      colorScheme: stateColorScheme,\n      setColorScheme\n    } = useCurrentColorScheme({\n      supportedColorSchemes: allColorSchemes,\n      defaultLightColorScheme,\n      defaultDarkColorScheme,\n      modeStorageKey,\n      colorSchemeStorageKey,\n      defaultMode,\n      storageWindow\n    });\n    let mode = stateMode;\n    let colorScheme = stateColorScheme;\n    if (nested) {\n      mode = ctx.mode;\n      colorScheme = ctx.colorScheme;\n    }\n    const calculatedMode = (() => {\n      if (!mode) {\n        // This scope occurs on the server\n        if (defaultMode === 'system') {\n          return designSystemMode;\n        }\n        return defaultMode;\n      }\n      return mode;\n    })();\n    const calculatedColorScheme = (() => {\n      if (!colorScheme) {\n        // This scope occurs on the server\n        if (calculatedMode === 'dark') {\n          return defaultDarkColorScheme;\n        }\n        // use light color scheme, if default mode is 'light' | 'system'\n        return defaultLightColorScheme;\n      }\n      return colorScheme;\n    })();\n\n    // 2. Create CSS variables and store them in objects (to be generated in stylesheets in the final step)\n    const {\n      css: rootCss,\n      vars: rootVars\n    } = cssVarsParser(restThemeProp, {\n      prefix: cssVarPrefix,\n      shouldSkipGeneratingVar\n    });\n\n    // 3. Start composing the theme object\n    const theme = _extends({}, restThemeProp, {\n      components,\n      colorSchemes,\n      cssVarPrefix,\n      vars: rootVars,\n      getColorSchemeSelector: targetColorScheme => `[${attribute}=\"${targetColorScheme}\"] &`\n    });\n\n    // 4. Create color CSS variables and store them in objects (to be generated in stylesheets in the final step)\n    //    The default color scheme stylesheet is constructed to have the least CSS specificity.\n    //    The other color schemes uses selector, default as data attribute, to increase the CSS specificity so that they can override the default color scheme stylesheet.\n    const defaultColorSchemeStyleSheet = {};\n    const otherColorSchemesStyleSheet = {};\n    Object.entries(colorSchemes).forEach(([key, scheme]) => {\n      const {\n        css,\n        vars\n      } = cssVarsParser(scheme, {\n        prefix: cssVarPrefix,\n        shouldSkipGeneratingVar\n      });\n      theme.vars = deepmerge(theme.vars, vars);\n      if (key === calculatedColorScheme) {\n        // 4.1 Merge the selected color scheme to the theme\n        Object.keys(scheme).forEach(schemeKey => {\n          if (scheme[schemeKey] && typeof scheme[schemeKey] === 'object') {\n            // shallow merge the 1st level structure of the theme.\n            theme[schemeKey] = _extends({}, theme[schemeKey], scheme[schemeKey]);\n          } else {\n            theme[schemeKey] = scheme[schemeKey];\n          }\n        });\n        if (theme.palette) {\n          theme.palette.colorScheme = key;\n        }\n      }\n      const resolvedDefaultColorScheme = (() => {\n        if (typeof defaultColorScheme === 'string') {\n          return defaultColorScheme;\n        }\n        if (defaultMode === 'dark') {\n          return defaultColorScheme.dark;\n        }\n        return defaultColorScheme.light;\n      })();\n      if (key === resolvedDefaultColorScheme) {\n        if (excludeVariablesFromRoot) {\n          const excludedVariables = {};\n          excludeVariablesFromRoot(cssVarPrefix).forEach(cssVar => {\n            excludedVariables[cssVar] = css[cssVar];\n            delete css[cssVar];\n          });\n          defaultColorSchemeStyleSheet[`[${attribute}=\"${key}\"]`] = excludedVariables;\n        }\n        defaultColorSchemeStyleSheet[`${colorSchemeSelector}, [${attribute}=\"${key}\"]`] = css;\n      } else {\n        otherColorSchemesStyleSheet[`${colorSchemeSelector === ':root' ? '' : colorSchemeSelector}[${attribute}=\"${key}\"]`] = css;\n      }\n    });\n\n    // 5. Declaring effects\n    // 5.1 Updates the selector value to use the current color scheme which tells CSS to use the proper stylesheet.\n    React.useEffect(() => {\n      if (colorScheme && colorSchemeNode) {\n        // attaches attribute to <html> because the css variables are attached to :root (html)\n        colorSchemeNode.setAttribute(attribute, colorScheme);\n      }\n    }, [colorScheme, attribute, colorSchemeNode]);\n\n    // 5.2 Remove the CSS transition when color scheme changes to create instant experience.\n    // credit: https://github.com/pacocoursey/next-themes/blob/b5c2bad50de2d61ad7b52a9c5cdc801a78507d7a/index.tsx#L313\n    React.useEffect(() => {\n      let timer;\n      if (disableTransitionOnChange && hasMounted.current && documentNode) {\n        const css = documentNode.createElement('style');\n        css.appendChild(documentNode.createTextNode(DISABLE_CSS_TRANSITION));\n        documentNode.head.appendChild(css);\n\n        // Force browser repaint\n        (() => window.getComputedStyle(documentNode.body))();\n        timer = setTimeout(() => {\n          documentNode.head.removeChild(css);\n        }, 1);\n      }\n      return () => {\n        clearTimeout(timer);\n      };\n    }, [colorScheme, disableTransitionOnChange, documentNode]);\n    React.useEffect(() => {\n      hasMounted.current = true;\n      return () => {\n        hasMounted.current = false;\n      };\n    }, []);\n    const contextValue = React.useMemo(() => ({\n      mode,\n      systemMode,\n      setMode,\n      lightColorScheme,\n      darkColorScheme,\n      colorScheme,\n      setColorScheme,\n      allColorSchemes\n    }), [allColorSchemes, colorScheme, darkColorScheme, lightColorScheme, mode, setColorScheme, setMode, systemMode]);\n    let shouldGenerateStyleSheet = true;\n    if (disableStyleSheetGeneration || nested && (upperTheme == null ? void 0 : upperTheme.cssVarPrefix) === cssVarPrefix) {\n      shouldGenerateStyleSheet = false;\n    }\n    const element = /*#__PURE__*/_jsxs(React.Fragment, {\n      children: [shouldGenerateStyleSheet && /*#__PURE__*/_jsxs(React.Fragment, {\n        children: [/*#__PURE__*/_jsx(GlobalStyles, {\n          styles: {\n            [colorSchemeSelector]: rootCss\n          }\n        }), /*#__PURE__*/_jsx(GlobalStyles, {\n          styles: defaultColorSchemeStyleSheet\n        }), /*#__PURE__*/_jsx(GlobalStyles, {\n          styles: otherColorSchemesStyleSheet\n        })]\n      }), /*#__PURE__*/_jsx(ThemeProvider, {\n        theme: resolveTheme ? resolveTheme(theme) : theme,\n        children: children\n      })]\n    });\n    if (nested) {\n      return element;\n    }\n    return /*#__PURE__*/_jsx(ColorSchemeContext.Provider, {\n      value: contextValue,\n      children: element\n    });\n  }\n  process.env.NODE_ENV !== \"production\" ? CssVarsProvider.propTypes = {\n    /**\n     * The body attribute name to attach colorScheme.\n     */\n    attribute: PropTypes.string,\n    /**\n     * The component tree.\n     */\n    children: PropTypes.node,\n    /**\n     * The node used to attach the color-scheme attribute\n     */\n    colorSchemeNode: PropTypes.any,\n    /**\n     * The CSS selector for attaching the generated custom properties\n     */\n    colorSchemeSelector: PropTypes.string,\n    /**\n     * localStorage key used to store `colorScheme`\n     */\n    colorSchemeStorageKey: PropTypes.string,\n    /**\n     * The initial color scheme used.\n     */\n    defaultColorScheme: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n    /**\n     * The initial mode used.\n     */\n    defaultMode: PropTypes.string,\n    /**\n     * If `true`, the provider creates its own context and generate stylesheet as if it is a root `CssVarsProvider`.\n     */\n    disableNestedContext: PropTypes.bool,\n    /**\n     * If `true`, the style sheet won't be generated.\n     *\n     * This is useful for controlling nested CssVarsProvider behavior.\n     */\n    disableStyleSheetGeneration: PropTypes.bool,\n    /**\n     * Disable CSS transitions when switching between modes or color schemes\n     */\n    disableTransitionOnChange: PropTypes.bool,\n    /**\n     * The document to attach the attribute to\n     */\n    documentNode: PropTypes.any,\n    /**\n     * The key in the local storage used to store current color scheme.\n     */\n    modeStorageKey: PropTypes.string,\n    /**\n     * A function to determine if the key, value should be attached as CSS Variable\n     */\n    shouldSkipGeneratingVar: PropTypes.func,\n    /**\n     * The window that attaches the 'storage' event listener\n     * @default window\n     */\n    storageWindow: PropTypes.any,\n    /**\n     * The calculated theme object that will be passed through context.\n     */\n    theme: PropTypes.object\n  } : void 0;\n  const defaultLightColorScheme = typeof designSystemColorScheme === 'string' ? designSystemColorScheme : designSystemColorScheme.light;\n  const defaultDarkColorScheme = typeof designSystemColorScheme === 'string' ? designSystemColorScheme : designSystemColorScheme.dark;\n  const getInitColorSchemeScript = params => systemGetInitColorSchemeScript(_extends({\n    attribute: defaultAttribute,\n    colorSchemeStorageKey: defaultColorSchemeStorageKey,\n    defaultMode: designSystemMode,\n    defaultLightColorScheme,\n    defaultDarkColorScheme,\n    modeStorageKey: defaultModeStorageKey\n  }, params));\n  return {\n    CssVarsProvider,\n    useColorScheme,\n    getInitColorSchemeScript\n  };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}